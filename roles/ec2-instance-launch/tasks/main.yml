---

- name: Ensure security group
  ec2_group:
    name: "{{ ec2_group }}"
    description: "{{ ec2_group }} VPC security group"
    rules:
      - proto: tcp
        ports: "{{ ec2_tcp_ports }}"
        cidr_ip: 0.0.0.0/0
      - proto: udp
        ports: "{{ ec2_udp_ports }}"
        cidr_ip: 0.0.0.0/0
      - proto: icmp
        from_port: 8
        to_port: -1
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0

- name: Ensure ec2 key pair
  ec2_key:
    name: "{{ ec2_key_name }}"
    key_material: "{{ lookup(ec2_key_public_uri_type, ec2_key_public_uri) }}"
    state: present
    wait: true

- name: Get vpc subnet id
  ec2_vpc_subnet_facts:
  register: subnet_facts

- name: Launch ec2 instance
  ec2:
    key_name: "{{ ec2_key_name }}"
    instance_type: "{{ ec2_instance_type }}"
    image: "{{ ec2_ami_id }}"
    assign_public_ip: yes
    group: "{{ ec2_group }}"
    vpc_subnet_id: "{{ subnet_facts.subnets[0].id }}"
    volumes:
      - device_name: "{{ ec2_instance_volume_device }}"
        volume_type: gp2
        volume_size: "{{ ec2_instance_volume_size }}"
        delete_on_termination: true
    user_data: "{{ lookup('template', 'user-data.j2') }}"
    wait: "{{ ec2_wait_instance }}"
  register: ec2

- name: Display instance public dns
  debug:
    msg: "Instance is {{ ec2.instances[0].state }} at {{ ec2.instances[0].public_dns_name }} with IP {{ ec2.instances[0].public_ip }}"
  when:
    - ec2_echo_ip
    - ec2 is defined
    - ec2.instances[0] is defined
